rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isParticipant(participants) {
      return isAuthenticated() && request.auth.uid in participants;
    }

    // Users collection - users can read/write their own data and read others' public data
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }

    // User stats collection - users can read/write their own stats
    match /userStats/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Daily activity collection - users can read/write their own activity
    match /dailyActivity/{activityId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid ||
        request.resource.data.userId == request.auth.uid;
    }

    // XP logs collection - users can read their own XP logs
    match /xpLogs/{logId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow write: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }

    // Friend requests collection
    match /friendRequests/{requestId} {
      allow read: if isAuthenticated() && (
        resource.data.fromUserId == request.auth.uid ||
        resource.data.toUserId == request.auth.uid
      );
      allow create: if isAuthenticated() && 
        request.resource.data.fromUserId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.fromUserId == request.auth.uid ||
        resource.data.toUserId == request.auth.uid
      );
      allow delete: if isAuthenticated() && (
        resource.data.fromUserId == request.auth.uid ||
        resource.data.toUserId == request.auth.uid
      );
    }

    // Friendships collection
    match /friendships/{friendshipId} {
      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.users
      );
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.users;
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.users;
      allow delete: if isAuthenticated() && 
        request.auth.uid in resource.data.users;
    }

    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow create: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants &&
          request.resource.data.senderId == request.auth.uid;
        allow update: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants &&
          (resource.data.senderId == request.auth.uid || 
           request.resource.data.keys().hasOnly(['isRead', 'readBy']));
        allow delete: if isAuthenticated() && 
          resource.data.senderId == request.auth.uid;
      }
    }

    // Message stats collection
    match /messageStats/{statsId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid ||
        request.resource.data.userId == request.auth.uid;
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Groups collection
    match /groups/{groupId} {
      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.members ||
        resource.data.isPublic == true
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid in resource.data.admins ||
        request.auth.uid in resource.data.members
      );
      allow delete: if isAuthenticated() && 
        request.auth.uid in resource.data.admins;
    }

    // Servers collection
    match /servers/{serverId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid in resource.data.admins ||
        request.auth.uid in resource.data.moderators
      );
      allow delete: if isAuthenticated() && 
        request.auth.uid in resource.data.admins;
    }

    // User presence collection for online/offline status
    match /presence/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }

    // System collections (read-only for users)
    match /system/{document=**} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server/admin can write
    }

    // Public collections (read-only for users)
    match /public/{document=**} {
      allow read: if true;
      allow write: if false; // Only server/admin can write
    }

    // Default deny rule - important for security
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
