rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Allow authenticated users to read and write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null; // Allow other users to read profiles for friend discovery
    }
    
    // Allow authenticated users to manage their friend requests
    match /friendRequests/{requestId} {
      allow read, write: if request.auth != null && (
        request.auth.uid == resource.data.fromUserId || 
        request.auth.uid == resource.data.toUserId ||
        request.auth.uid == request.resource.data.fromUserId || 
        request.auth.uid == request.resource.data.toUserId
      );
    }
    
    // Allow authenticated users to manage their friendships
    match /friendships/{friendshipId} {
      allow read, write: if request.auth != null && (
        request.auth.uid == resource.data.user1 || 
        request.auth.uid == resource.data.user2 ||
        request.auth.uid == request.resource.data.user1 || 
        request.auth.uid == request.resource.data.user2
      );
    }
    
    // Allow authenticated users to access conversations they're part of
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null && (
        request.auth.uid in resource.data.participants ||
        request.auth.uid in request.resource.data.participants
      );
    }
    
    // Allow authenticated users to access messages in conversations they're part of
    match /conversations/{conversationId}/messages/{messageId} {
      allow read, write: if request.auth != null && (
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants
      );
    }
    
    // Allow authenticated users to manage their servers
    match /servers/{serverId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        request.auth.uid == resource.data.ownerId ||
        request.auth.uid == request.resource.data.ownerId ||
        request.auth.uid in resource.data.admins ||
        request.auth.uid in request.resource.data.admins
      );
    }
    
    // Allow authenticated users to manage their notifications
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid == request.resource.data.userId
      );
    }
    
    // Allow authenticated users to manage their groups
    match /groups/{groupId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        request.auth.uid == resource.data.ownerId ||
        request.auth.uid == request.resource.data.ownerId ||
        request.auth.uid in resource.data.members ||
        request.auth.uid in request.resource.data.members
      );
    }
    
    // Allow authenticated users to manage their user stats
    match /userStats/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow authenticated users to manage file uploads
    match /fileUploads/{fileId} {
      allow read, write: if request.auth != null;
      allow delete: if request.auth != null && request.auth.uid == resource.data.uploadedBy;
    }

    // Test document for connection testing
    match /_test/connection {
      allow read: if false; // This will cause permission denied, which is expected for connection test
    }
  }
}
