rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can read all users for friends/search, write only their own
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User statistics - users can read/write their own stats, read others for leaderboard
    match /userStats/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Daily activity tracking
    match /dailyActivity/{activityId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId;
    }
    
    // Message statistics
    match /messageStats/{messageStatsId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId;
    }
    
    // XP logs
    match /xpLogs/{logId} {
      allow read: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId;
    }
    
    // Achievement progress
    match /achievementProgress/{progressId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId;
    }
    
    // Friend requests - users involved can read/write
    match /friendRequests/{requestId} {
      allow read, write: if request.auth != null 
        && (request.auth.uid == resource.data.fromUserId 
            || request.auth.uid == resource.data.toUserId);
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.fromUserId;
    }
    
    // Conversations - participants can read/write
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null 
        && request.auth.uid in resource.data.participants;
      allow create: if request.auth != null 
        && request.auth.uid in request.resource.data.participants;
    }
    
    // Messages within conversations - participants can read/write
    match /conversations/{conversationId}/messages/{messageId} {
      allow read: if request.auth != null 
        && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.senderId
        && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      allow update: if request.auth != null 
        && request.auth.uid == resource.data.senderId;
      allow delete: if request.auth != null 
        && request.auth.uid == resource.data.senderId;
    }
    
    // Servers - all authenticated users can read, members can write
    match /servers/{serverId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && (request.auth.uid == resource.data.ownerId 
            || request.auth.uid in resource.data.members);
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.ownerId;
    }
    
    // Server members subcollection
    match /servers/{serverId}/members/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && (request.auth.uid == userId 
            || request.auth.uid == get(/databases/$(database)/documents/servers/$(serverId)).data.ownerId);
      allow create: if request.auth != null 
        && request.auth.uid == userId;
    }
    
    // Groups - members can read/write
    match /groups/{groupId} {
      allow read, write: if request.auth != null 
        && request.auth.uid in resource.data.members;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.ownerId;
    }
    
    // Server invites - all authenticated users can read
    match /serverInvites/{inviteId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && request.auth.uid == resource.data.createdBy;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.createdBy;
    }
    
    // Notifications - users can read/write their own
    match /notifications/{userId}/userNotifications/{notificationId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Default deny rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
