{
  "rules": {
    
    
    
    
    
    
    ".read": "auth != null",
    ".write": false,
    
    
    
    
    
    "presence": {
      "$uid": {
        ".read": "auth != null",
        ".write": "auth != null && auth.uid == $uid",
        ".validate": "newData.hasChildren(['isOnline', 'lastSeen'])",
        "isOnline": {
          ".validate": "newData.isBoolean()"
        },
        "lastSeen": {
          ".validate": "newData.isNumber()"
        },
        "status": {
          ".validate": "newData.isString() && newData.val().length <= 100"
        },
        "activity": {
          ".validate": "newData.isString() && newData.val().length <= 200"
        }
      }
    },
    
    
    
    
    
    "calls": {
      
      "incoming": {
        "$uid": {
          ".read": "auth != null && auth.uid == $uid",
          ".write": "auth != null",
          ".validate": "newData.hasChildren(['id', 'callerId', 'receiverId', 'status', 'type', 'startedAt'])",
          "id": {
            ".validate": "newData.isString()"
          },
          "callerId": {
            ".validate": "newData.isString()"
          },
          "callerName": {
            ".validate": "newData.isString()"
          },
          "receiverId": {
            ".validate": "newData.isString() && newData.val() == $uid"
          },
          "receiverName": {
            ".validate": "newData.isString()"
          },
          "status": {
            ".validate": "newData.isString() && (newData.val() == 'ringing' || newData.val() == 'ended' || newData.val() == 'missed')"
          },
          "type": {
            ".validate": "newData.isString() && (newData.val() == 'voice' || newData.val() == 'video')"
          },
          "startedAt": {
            ".validate": "newData.isString()"
          },
          "conversationId": {
            ".validate": "newData.isString()"
          }
        }
      },
      
      
      "outgoing": {
        "$uid": {
          ".read": "auth != null && auth.uid == $uid",
          ".write": "auth != null && auth.uid == $uid",
          ".validate": "newData.hasChildren(['callId', 'status', 'startedAt'])",
          "callId": {
            ".validate": "newData.isString()"
          },
          "status": {
            ".validate": "newData.isString() && (newData.val() == 'ringing' || newData.val() == 'answered' || newData.val() == 'ended' || newData.val() == 'rejected' || newData.val() == 'missed')"
          },
          "startedAt": {
            ".validate": "newData.isString()"
          },
          "answeredAt": {
            ".validate": "newData.isString()"
          },
          "endedAt": {
            ".validate": "newData.isString()"
          },
          "duration": {
            ".validate": "newData.isNumber()"
          }
        }
      },
      
      
      "status": {
        "$uid": {
          ".read": "auth != null",
          ".write": "auth != null",
          ".validate": "newData.hasChildren(['callId', 'status'])",
          "callId": {
            ".validate": "newData.isString()"
          },
          "status": {
            ".validate": "newData.isString() && (newData.val() == 'answered' || newData.val() == 'rejected' || newData.val() == 'ended' || newData.val() == 'missed')"
          },
          "answeredAt": {
            ".validate": "newData.isString()"
          },
          "endedAt": {
            ".validate": "newData.isString()"
          },
          "duration": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          }
        }
      }
    },
    
    
    
    
    
    "typing": {
      "$conversationId": {
        ".read": "auth != null",
        "$uid": {
          ".write": "auth != null && auth.uid == $uid",
          ".validate": "newData.hasChildren(['isTyping', 'timestamp'])",
          "isTyping": {
            ".validate": "newData.isBoolean()"
          },
          "timestamp": {
            ".validate": "newData.isNumber()"
          }
        }
      }
    },
    
    "messageStatus": {
      "$conversationId": {
        "$messageId": {
          ".read": "auth != null",
          "deliveredTo": {
            "$uid": {
              ".write": "auth != null && auth.uid == $uid",
              ".validate": "newData.isNumber()"
            }
          },
          "readBy": {
            "$uid": {
              ".write": "auth != null && auth.uid == $uid",
              ".validate": "newData.isNumber()"
            }
          }
        }
      }
    },
    
    
    
    
    
    "notifications": {
      "$uid": {
        ".read": "auth != null && auth.uid == $uid",
        ".write": "auth != null",
        "$notificationId": {
          ".validate": "newData.hasChildren(['type', 'title', 'message', 'timestamp'])",
          "type": {
            ".validate": "newData.isString() && (newData.val() == 'friend_request' || newData.val() == 'message' || newData.val() == 'call' || newData.val() == 'system')"
          },
          "title": {
            ".validate": "newData.isString() && newData.val().length <= 100"
          },
          "message": {
            ".validate": "newData.isString() && newData.val().length <= 500"
          },
          "timestamp": {
            ".validate": "newData.isNumber()"
          },
          "isRead": {
            ".validate": "newData.isBoolean()"
          },
          "senderId": {
            ".validate": "newData.isString()"
          },
          "conversationId": {
            ".validate": "newData.isString()"
          },
          "callId": {
            ".validate": "newData.isString()"
          }
        }
      }
    },
    
    
    
    
    
    "gameSessions": {
      "$sessionId": {
        ".read": "auth != null",
        ".write": "auth != null && (auth.uid == newData.child('hostId').val() || root.child('gameSessions').child($sessionId).child('players').child(auth.uid).exists())",
        ".validate": "newData.hasChildren(['hostId', 'gameType', 'maxPlayers', 'createdAt', 'status'])",
        "hostId": {
          ".validate": "newData.isString()"
        },
        "gameType": {
          ".validate": "newData.isString() && newData.val().length <= 50"
        },
        "maxPlayers": {
          ".validate": "newData.isNumber() && newData.val() >= 2 && newData.val() <= 20"
        },
        "currentPlayers": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "createdAt": {
          ".validate": "newData.isNumber()"
        },
        "status": {
          ".validate": "newData.isString() && (newData.val() == 'waiting' || newData.val() == 'in_progress' || newData.val() == 'completed')"
        },
        "players": {
          "$playerId": {
            ".validate": "newData.hasChildren(['joinedAt', 'status'])",
            "joinedAt": {
              ".validate": "newData.isNumber()"
            },
            "status": {
              ".validate": "newData.isString() && (newData.val() == 'joined' || newData.val() == 'ready' || newData.val() == 'left')"
            },
            "username": {
              ".validate": "newData.isString()"
            }
          }
        },
        "settings": {
          "isPrivate": {
            ".validate": "newData.isBoolean()"
          },
          "password": {
            ".validate": "newData.isString() && newData.val().length <= 20"
          }
        }
      }
    },
    
    
    
    
    
    "voiceRooms": {
      "$roomId": {
        ".read": "auth != null",
        ".write": "auth != null",
        "participants": {
          "$uid": {
            ".write": "auth != null && auth.uid == $uid",
            ".validate": "newData.hasChildren(['joinedAt', 'isMuted', 'isDeafened'])",
            "joinedAt": {
              ".validate": "newData.isNumber()"
            },
            "isMuted": {
              ".validate": "newData.isBoolean()"
            },
            "isDeafened": {
              ".validate": "newData.isBoolean()"
            },
            "isSpeaking": {
              ".validate": "newData.isBoolean()"
            }
          }
        },
        "settings": {
          ".write": "auth != null && auth.uid == root.child('voiceRooms').child($roomId).child('ownerId').val()",
          "maxParticipants": {
            ".validate": "newData.isNumber() && newData.val() >= 2 && newData.val() <= 50"
          },
          "isPrivate": {
            ".validate": "newData.isBoolean()"
          }
        }
      }
    },
    
    
    
    
    
    "serverEvents": {
      "$serverId": {
        ".read": "auth != null",
        ".write": "auth != null",
        "announcements": {
          "$announcementId": {
            ".validate": "newData.hasChildren(['message', 'authorId', 'timestamp'])",
            "message": {
              ".validate": "newData.isString() && newData.val().length <= 1000"
            },
            "authorId": {
              ".validate": "newData.isString()"
            },
            "timestamp": {
              ".validate": "newData.isNumber()"
            },
            "priority": {
              ".validate": "newData.isString() && (newData.val() == 'low' || newData.val() == 'normal' || newData.val() == 'high')"
            }
          }
        },
        "memberActivity": {
          "$uid": {
            ".read": "auth != null",
            ".write": "auth != null && auth.uid == $uid",
            "lastActive": {
              ".validate": "newData.isNumber()"
            },
            "activity": {
              ".validate": "newData.isString() && newData.val().length <= 100"
            }
          }
        }
      }
    },
    
    
    
    
    
    ".info": {
      "connected": {
        ".read": true
      },
      "serverTimeOffset": {
        ".read": true
      }
    },
    
    "connectionMonitor": {
      "$uid": {
        ".read": "auth != null && auth.uid == $uid",
        ".write": "auth != null && auth.uid == $uid",
        "lastPing": {
          ".validate": "newData.isNumber()"
        },
        "connectionQuality": {
          ".validate": "newData.isString() && (newData.val() == 'excellent' || newData.val() == 'good' || newData.val() == 'poor')"
        }
      }
    },
    
    
    
    
    
    "test": {
      ".read": "auth != null",
      ".write": "auth != null"
    },
    
    "debug": {
      ".read": "auth != null",
      ".write": "auth != null"
    }
  }
}