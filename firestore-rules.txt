rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User statistics - users can read/write their own stats
    match /userStats/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null; // Allow reading for leaderboard
    }
    
    // Daily activity tracking - users can read/write their own activity
    match /dailyActivity/{activityId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId;
    }
    
    // Message statistics - users can read/write their own message stats
    match /messageStats/{messageStatsId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId;
    }
    
    // XP logs - users can read their own XP logs, write is controlled
    match /xpLogs/{logId} {
      allow read: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId;
    }
    
    // Achievement progress - users can read/write their own achievements
    match /achievementProgress/{progressId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId;
    }
    
    // Public leaderboard data - all authenticated users can read
    match /leaderboard/{document=**} {
      allow read: if request.auth != null;
    }
    
    // Server-specific statistics (if needed)
    match /serverStats/{serverId}/userStats/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Chat messages (if storing in Firestore)
    match /conversations/{conversationId}/messages/{messageId} {
      allow read, write: if request.auth != null;
    }
    
    // Conversation metadata
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null 
        && request.auth.uid in resource.data.participants;
      allow create: if request.auth != null 
        && request.auth.uid in request.resource.data.participants;
    }
    
    // Friend requests
    match /friendRequests/{requestId} {
      allow read, write: if request.auth != null
        && (request.auth.uid == resource.data.fromUserId
            || request.auth.uid == resource.data.toUserId);
      allow create: if request.auth != null
        && request.auth.uid == request.resource.data.fromUserId;
    }

    // Servers - users can read public servers, write if member/owner
    match /servers/{serverId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null
        && (request.auth.uid == resource.data.ownerId
            || request.auth.uid in resource.data.members);
      allow create: if request.auth != null
        && request.auth.uid == request.resource.data.ownerId;
    }

    // Server members - users can read if server member, write own membership
    match /servers/{serverId}/members/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null
        && (request.auth.uid == userId
            || request.auth.uid == get(/databases/$(database)/documents/servers/$(serverId)).data.ownerId);
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // Groups - users can read/write if member
    match /groups/{groupId} {
      allow read, write: if request.auth != null
        && request.auth.uid in resource.data.members;
      allow create: if request.auth != null
        && request.auth.uid == request.resource.data.ownerId;
    }

    // Conversations - users can read/write if participant
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null
        && request.auth.uid in resource.data.participants;
      allow create: if request.auth != null
        && request.auth.uid in request.resource.data.participants;
    }

    // Messages - users can read/write if conversation participant
    match /conversations/{conversationId}/messages/{messageId} {
      allow read: if request.auth != null
        && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      allow write: if request.auth != null
        && (request.auth.uid == resource.data.senderId
            || request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants);
      allow create: if request.auth != null
        && request.auth.uid == request.resource.data.senderId
        && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
    }

    // Server invites
    match /serverInvites/{inviteId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null
        && request.auth.uid == resource.data.createdBy;
      allow create: if request.auth != null
        && request.auth.uid == request.resource.data.createdBy;
    }

    // Notifications - users can read/write their own notifications
    match /notifications/{userId}/userNotifications/{notificationId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // File uploads - users can read/write their own uploaded files
    match /fileUploads/{fileId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == resource.data.uploadedBy;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uploadedBy;
      allow delete: if request.auth != null && request.auth.uid == resource.data.uploadedBy;
    }

    // Default deny rule for any other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
