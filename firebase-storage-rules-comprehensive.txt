rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // ==============================================
    // HELPER FUNCTIONS FOR STORAGE
    // ==============================================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user owns the file
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Validate file size (in bytes)
    function isValidSize(maxSize) {
      return resource == null || resource.size <= maxSize;
    }
    
    // Validate file type
    function isValidImageType() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.contentType in ['image/jpeg', 'image/png', 'image/webp', 'image/gif'];
    }
    
    function isValidVideoType() {
      return request.resource.contentType.matches('video/.*') &&
             request.resource.contentType in ['video/mp4', 'video/webm', 'video/quicktime'];
    }
    
    function isValidAudioType() {
      return request.resource.contentType.matches('audio/.*') &&
             request.resource.contentType in ['audio/mpeg', 'audio/wav', 'audio/ogg', 'audio/webm'];
    }
    
    function isValidDocumentType() {
      return request.resource.contentType in [
        'application/pdf',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'application/vnd.ms-excel',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'text/plain'
      ];
    }
    
    // ==============================================
    // USER PROFILE IMAGES
    // ==============================================
    
    match /users/{userId}/profile/{fileName} {
      // Users can read any profile image for UI display
      allow read: if isAuthenticated();
      
      // Users can only upload/update their own profile images
      allow write: if isOwner(userId) &&
                      isValidImageType() &&
                      isValidSize(10485760) && // 10MB max
                      fileName.matches('.*\\.(jpg|jpeg|png|webp|gif)$');
      
      // Users can delete their own profile images
      allow delete: if isOwner(userId);
    }
    
    // ==============================================
    // USER AVATARS (smaller profile pictures)
    // ==============================================
    
    match /users/{userId}/avatar/{fileName} {
      // Users can read any avatar for UI display
      allow read: if isAuthenticated();
      
      // Users can only upload/update their own avatars
      allow write: if isOwner(userId) &&
                      isValidImageType() &&
                      isValidSize(5242880) && // 5MB max for avatars
                      fileName.matches('.*\\.(jpg|jpeg|png|webp)$');
      
      // Users can delete their own avatars
      allow delete: if isOwner(userId);
    }
    
    // ==============================================
    // USER BACKGROUND IMAGES
    // ==============================================
    
    match /users/{userId}/backgrounds/{fileName} {
      // Users can read backgrounds they have access to
      allow read: if isAuthenticated();
      
      // Users can upload their own backgrounds
      allow write: if isOwner(userId) &&
                      isValidImageType() &&
                      isValidSize(20971520) && // 20MB max for backgrounds
                      fileName.matches('.*\\.(jpg|jpeg|png|webp)$');
      
      // Users can delete their own backgrounds
      allow delete: if isOwner(userId);
    }
    
    // ==============================================
    // CONVERSATION/MESSAGE ATTACHMENTS
    // ==============================================
    
    match /conversations/{conversationId}/attachments/{userId}/{fileName} {
      // Conversation participants can read attachments
      allow read: if isAuthenticated() &&
                     // Check if user is participant through Firestore
                     request.auth.uid in firestore.get(/databases/(default)/documents/conversations/$(conversationId)).data.participants;
      
      // Only the uploader can write attachments
      allow write: if isOwner(userId) &&
                      // Validate file types and sizes
                      ((isValidImageType() && isValidSize(20971520)) || // 20MB for images
                       (isValidVideoType() && isValidSize(104857600)) || // 100MB for videos
                       (isValidAudioType() && isValidSize(52428800)) || // 50MB for audio
                       (isValidDocumentType() && isValidSize(52428800))); // 50MB for documents
      
      // Only the uploader can delete attachments
      allow delete: if isOwner(userId);
    }
    
    // ==============================================
    // VOICE MESSAGES
    // ==============================================
    
    match /conversations/{conversationId}/voice/{userId}/{fileName} {
      // Conversation participants can read voice messages
      allow read: if isAuthenticated() &&
                     request.auth.uid in firestore.get(/databases/(default)/documents/conversations/$(conversationId)).data.participants;
      
      // Users can upload voice messages to conversations they participate in
      allow write: if isOwner(userId) &&
                      isValidAudioType() &&
                      isValidSize(26214400) && // 25MB max for voice messages
                      fileName.matches('.*\\.(mp3|wav|ogg|webm|m4a)$');
      
      // Users can delete their own voice messages
      allow delete: if isOwner(userId);
    }
    
    // ==============================================
    // SERVER ASSETS
    // ==============================================
    
    match /servers/{serverId}/assets/{assetType}/{fileName} {
      // Server members can read server assets
      allow read: if isAuthenticated();
      
      // Only server admins/owners can upload server assets
      allow write: if isAuthenticated() &&
                      // Check admin status through Firestore
                      (request.auth.uid == firestore.get(/databases/(default)/documents/servers/$(serverId)).data.ownerId ||
                       request.auth.uid in firestore.get(/databases/(default)/documents/servers/$(serverId)).data.admins) &&
                      // Validate asset types
                      ((assetType == 'icons' && isValidImageType() && isValidSize(5242880)) || // 5MB for icons
                       (assetType == 'banners' && isValidImageType() && isValidSize(20971520)) || // 20MB for banners
                       (assetType == 'emojis' && isValidImageType() && isValidSize(1048576))); // 1MB for emojis
      
      // Only server admins/owners can delete server assets
      allow delete: if isAuthenticated() &&
                       (request.auth.uid == firestore.get(/databases/(default)/documents/servers/$(serverId)).data.ownerId ||
                        request.auth.uid in firestore.get(/databases/(default)/documents/servers/$(serverId)).data.admins);
    }
    
    // ==============================================
    // GROUP ASSETS
    // ==============================================
    
    match /groups/{groupId}/assets/{assetType}/{fileName} {
      // Group members can read group assets
      allow read: if isAuthenticated() &&
                     request.auth.uid in firestore.get(/databases/(default)/documents/groups/$(groupId)).data.members;
      
      // Group admins/owners can upload assets
      allow write: if isAuthenticated() &&
                      (request.auth.uid == firestore.get(/databases/(default)/documents/groups/$(groupId)).data.ownerId ||
                       request.auth.uid in firestore.get(/databases/(default)/documents/groups/$(groupId)).data.admins) &&
                      isValidImageType() &&
                      isValidSize(10485760); // 10MB max for group assets
      
      // Group admins/owners can delete assets
      allow delete: if isAuthenticated() &&
                       (request.auth.uid == firestore.get(/databases/(default)/documents/groups/$(groupId)).data.ownerId ||
                        request.auth.uid in firestore.get(/databases/(default)/documents/groups/$(groupId)).data.admins);
    }
    
    // ==============================================
    // TEMPORARY UPLOADS
    // ==============================================
    
    match /temp/{userId}/{fileName} {
      // Users can read their own temporary files
      allow read: if isOwner(userId);
      
      // Users can upload temporary files (will be cleaned up by cloud function)
      allow write: if isOwner(userId) &&
                      isValidSize(104857600) && // 100MB max for temp files
                      // Auto-expire temp files after 24 hours
                      request.time < resource.timeCreated + duration.value(86400, 's');
      
      // Users can delete their own temporary files
      allow delete: if isOwner(userId);
    }
    
    // ==============================================
    // SHARED FILES
    // ==============================================
    
    match /shared/{fileId}/{fileName} {
      // Authenticated users can read shared files
      allow read: if isAuthenticated() &&
                     // Check sharing permissions through Firestore
                     (request.auth.uid == firestore.get(/databases/(default)/documents/fileUploads/$(fileId)).data.uploaderId ||
                      request.auth.uid in firestore.get(/databases/(default)/documents/fileUploads/$(fileId)).data.sharedWith);
      
      // Users can upload files to share
      allow write: if isAuthenticated() &&
                      // Check if user is the uploader
                      request.auth.uid == firestore.get(/databases/(default)/documents/fileUploads/$(fileId)).data.uploaderId &&
                      isValidSize(104857600); // 100MB max
      
      // Users can delete their own shared files
      allow delete: if isAuthenticated() &&
                       request.auth.uid == firestore.get(/databases/(default)/documents/fileUploads/$(fileId)).data.uploaderId;
    }
    
    // ==============================================
    // GAME SCREENSHOTS/CLIPS
    // ==============================================
    
    match /games/{userId}/screenshots/{fileName} {
      // Users can read their own and friends' screenshots
      allow read: if isAuthenticated() &&
                     (isOwner(userId) ||
                      exists(/databases/(default)/documents/users/$(request.auth.uid)/friends/$(userId)));
      
      // Users can upload their own game screenshots
      allow write: if isOwner(userId) &&
                      isValidImageType() &&
                      isValidSize(20971520) && // 20MB max
                      fileName.matches('screenshot_.*\\.(jpg|jpeg|png|webp)$');
      
      // Users can delete their own screenshots
      allow delete: if isOwner(userId);
    }
    
    match /games/{userId}/clips/{fileName} {
      // Users can read their own and friends' clips
      allow read: if isAuthenticated() &&
                     (isOwner(userId) ||
                      exists(/databases/(default)/documents/users/$(request.auth.uid)/friends/$(userId)));
      
      // Users can upload their own game clips
      allow write: if isOwner(userId) &&
                      isValidVideoType() &&
                      isValidSize(524288000) && // 500MB max for clips
                      fileName.matches('clip_.*\\.(mp4|webm|mov)$');
      
      // Users can delete their own clips
      allow delete: if isOwner(userId);
    }
    
    // ==============================================
    // SYSTEM/ADMIN FILES
    // ==============================================
    
    match /system/{document=**} {
      // System files are read-only for regular users
      allow read: if isAuthenticated();
      allow write: if false; // Only backend admin access
    }
    
    match /admin/{document=**} {
      // Admin files have no user access
      allow read, write: if false; // Only backend admin access
    }
    
    // ==============================================
    // DEVELOPMENT/TESTING
    // ==============================================
    
    match /test/{document=**} {
      // Test files for development
      allow read, write: if isAuthenticated() &&
                            // Only allow in development environment
                            request.time < timestamp.date(2025, 12, 31);
    }
    
    // ==============================================
    // DEFAULT DENY
    // ==============================================
    
    // Deny access to any undefined paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
